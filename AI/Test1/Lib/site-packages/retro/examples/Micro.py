import retro
import numpy as np
import cv2
import neat
import pickle

env = retro.make('Airstriker-Genesis','Level1')

imgarray= []
def eval_genomes(genomes, config):

    for genome_id, genome in genomes:

        ob=env.reset()
        ac=env.action_space.sample()

        inx, iny, inc= env.observation_space.shape

        inx= int(inx/8)
        iny= int(iny/8)

        net = neat.nn.recurrent.RecurrentNetwork.create(genome, config)

        current_max_fitness = 0
        fitness_current = 0
        frame =0
        counter =0
        crew =0
        crew_max =0

        done = False

        while not done:

            env.render()
            frame+=1

            ob=cv2.resize(ob,(inx, iny))
            ob= cv2.cvtColor(ob, cv2.COLOR_BGR2GRAY)
            ob= np.reshape(ob (inx,iny))

            for x in ob:
                for y in x:
                    imgarray.append(y)

            nnOutput =net.activate(imgarray)

            print(len(imgarray), nnOutput)

            ob, rew, done, info=env.step(nnOutput)

            imgarray.clear()

            crew = info['score']
#if current reward is greater than the max the fitness increases and the new reward is the max.
            if crew> crew_max:
                fitness_current += 1
                crew_max = crew
            if fitness_current > current_max_fitness:
                current_max_fitness = fitness_current
                counter = 0
            else:
                counter+=1
#if the ai doesn't make any progress after 200 iterations the session ends and it lists its id and what it achieved
#normally session ends when the ship loses all of its lives.
            if done or counter == 200:
                done = True
                print(genome_id, fitness_current)

            genome.fitness = fitness_current


config = neat.Config(neat.DefaultGenome, neat.DefaultReproduction,
                    neat.DefaultSpeciesSet, neat.DefaultStagnation, 'config-feedforward')

p= neat.Population(config)

eval_genomes
winner = p.run(eval_genomes)

with open('winn.pkl','wb') as output:
    pickle.dump(winner, output, 1)
